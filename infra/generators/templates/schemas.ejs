import { pick } from "rambda";

import { defaultHttpErrorCollection } from "#libs/errors/default-http-error-collection.js";
import { BadRequestException, ResourceNotFoundException } from "#libs/errors/domain.errors.js";
import { mapHttpErrorsToSchemaErrorCollection, mixinTagForSchema } from "#libs/utils/schemas.js";
<% if (isSecure) { %>import { UNAUTHORIZED_ACCESS_401 } from "#libs/errors/http.errors.js";<% } %>
import {
  <%= pluralModuleNames.upperSnakeCase %>_CREATION_CONTRACT,
  FIND_ALL_<%= moduleNames.upperSnakeCase %>_INPUT_CONTRACT,
  FIND_ALL_<%= moduleNames.upperSnakeCase %>_OUTPUT_CONTRACT,
  <%= pluralModuleNames.upperSnakeCase %>_ENTITY_CONTRACT,
  <%= pluralModuleNames.upperSnakeCase %>_UPDATE_CONTRACT,
} from "#modules/<%= moduleNames.lowerCamelCase %>/<%= moduleNames.lowerCamelCase %>.contracts.js";
import { COMMON_CONTRACTS_V1 } from "#libs/common.contracnts.js";

const <%= moduleNames.lowerCamelCase %>Schemas = {
  findAll: {
    <% if (isSecure) { %>security: [{ bearerTokenAuth: [] }],<% } %>
    description: "Retrieve a list of all <%= moduleNames.lowerCamelCase %> based on given criteria.",
    summary: "List all <%= moduleNames.kebabCase %>.",
    querystring: FIND_ALL_<%= moduleNames.upperSnakeCase %>_INPUT_CONTRACT,
    response: {
      200: FIND_ALL_<%= moduleNames.upperSnakeCase %>_OUTPUT_CONTRACT,
      ...mapHttpErrorsToSchemaErrorCollection(pick([BadRequestException.name<% if (isSecure) { %>, UNAUTHORIZED_ACCESS_401.name<% } %>], defaultHttpErrorCollection)),
    },
  },

  findOneById: {
    <% if (isSecure) { %>security: [{ bearerTokenAuth: [] }],<% } %>
    description: "Retrieve detailed information about a specific <%= pluralModuleNames.kebabCase %> by ID.",
    summary: "Get single <%= pluralModuleNames.kebabCase %> details.",
    params: COMMON_CONTRACTS_V1.id,
    response: {
      200: <%= pluralModuleNames.upperSnakeCase %>_ENTITY_CONTRACT,
      ...mapHttpErrorsToSchemaErrorCollection(
        pick([BadRequestException.name, ResourceNotFoundException.name<% if (isSecure) { %>, UNAUTHORIZED_ACCESS_401.name<% } %>], defaultHttpErrorCollection),
      ),
    },
  },

  createOne: {
    <% if (isSecure) { %>security: [{ bearerTokenAuth: [] }],<% } %>
    description: "Create a new <%= pluralModuleNames.kebabCase %> with the provided data.",
    summary: "Create new <%= pluralModuleNames.kebabCase %>.",
    body: <%= pluralModuleNames.upperSnakeCase %>_CREATION_CONTRACT,
    response: {
      201: <%= pluralModuleNames.upperSnakeCase %>_ENTITY_CONTRACT,
      ...mapHttpErrorsToSchemaErrorCollection(pick([BadRequestException.name<% if (isSecure) { %>, UNAUTHORIZED_ACCESS_401.name<% } %>], defaultHttpErrorCollection)),
    },
  },

  updateOneById: {
    <% if (isSecure) { %>security: [{ bearerTokenAuth: [] }],<% } %>
    description: "Update an existing <%= pluralModuleNames.kebabCase %> with new information based on ID.",
    summary: "Update <%= pluralModuleNames.kebabCase %> details.",
    params: COMMON_CONTRACTS_V1.id,
    body: <%= pluralModuleNames.upperSnakeCase %>_UPDATE_CONTRACT,
    response: {
      200: <%= pluralModuleNames.upperSnakeCase %>_ENTITY_CONTRACT,
      ...mapHttpErrorsToSchemaErrorCollection(
        pick([BadRequestException.name, ResourceNotFoundException.name<% if (isSecure) { %>, UNAUTHORIZED_ACCESS_401.name<% } %>], defaultHttpErrorCollection),
      ),
    },
  },

  deleteOneById: {
    <% if (isSecure) { %>security: [{ bearerTokenAuth: [] }],<% } %>
    description: "Delete a specific <%= pluralModuleNames.kebabCase %> by ID.",
    summary: "Remove an <%= pluralModuleNames.kebabCase %>.",
    params: COMMON_CONTRACTS_V1.id,
    response: {
      200: COMMON_CONTRACTS_V1.status,
      ...mapHttpErrorsToSchemaErrorCollection(
        pick([BadRequestException.name, ResourceNotFoundException.name<% if (isSecure) { %>, UNAUTHORIZED_ACCESS_401.name<% } %>], defaultHttpErrorCollection),
      ),
    },
  },
};

export default mixinTagForSchema(<%= moduleNames.lowerCamelCase %>Schemas, ["<%= moduleNames.lowerCamelCase %>"]);
