import { createSelectSchema, createInsertSchema } from "drizzle-typebox";
import { Type } from "@sinclair/typebox";

import { COMMON_CONTRACTS_V1 } from "#libs/common.contracnts.js";
import { paginationSchema } from "#libs/utils/schemas.js";

import { <%= moduleNames.lowerCamelCase %> } from "./<%= moduleNames.kebabCase %>.model.js";

const <%= pluralModuleNames.upperSnakeCase %>_SELECT_CONTRACT = createSelectSchema(<%= moduleNames.lowerCamelCase %>);
const <%= pluralModuleNames.upperSnakeCase %>_INSERT_CONTRACT = createInsertSchema(<%= moduleNames.lowerCamelCase %>);

export const <%= pluralModuleNames.upperSnakeCase %>_ENTITY_CONTRACT = Type.Intersect([
  <%= pluralModuleNames.upperSnakeCase %>_SELECT_CONTRACT,
  COMMON_CONTRACTS_V1.id,
  COMMON_CONTRACTS_V1.timestamp,
]);
export const <%= pluralModuleNames.upperSnakeCase %>_CREATION_CONTRACT = Type.Omit(<%= pluralModuleNames.upperSnakeCase %>_INSERT_CONTRACT, ["id", "createdAt", "updatedAt"]);
export const <%= pluralModuleNames.upperSnakeCase %>_UPDATE_CONTRACT = Type.Partial(<%= pluralModuleNames.upperSnakeCase %>_CREATION_CONTRACT);
export const FIND_ALL_<%= moduleNames.upperSnakeCase %>_INPUT_CONTRACT = COMMON_CONTRACTS_V1.paginationQuery;
export const FIND_ALL_<%= moduleNames.upperSnakeCase %>_OUTPUT_CONTRACT = paginationSchema(<%= pluralModuleNames.upperSnakeCase %>_ENTITY_CONTRACT);

/**
 * @typedef {Static<<%= pluralModuleNames.upperSnakeCase %>_ENTITY_CONTRACT>} Order
 * @typedef {Static<<%= pluralModuleNames.upperSnakeCase %>_CREATION_CONTRACT>} CreateOrder
 * @typedef {Static<<%= pluralModuleNames.upperSnakeCase %>_UPDATE_CONTRACT>} UpdateOrder
 * @typedef {Static<FIND_ALL_<%= moduleNames.upperSnakeCase %>_INPUT_CONTRACT>} FindAllOrderInput
 * @typedef {Static<FIND_ALL_<%= moduleNames.upperSnakeCase %>_OUTPUT_CONTRACT>} FindAllOrderOutput
 */
