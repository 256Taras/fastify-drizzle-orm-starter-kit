import { partial } from "rambda";
import { count, eq } from "drizzle-orm";

import { ResourceNotFoundException } from "#libs/errors/domain.errors.js";
import { calculatePaginationOffset, createPaginatedResponse } from "#libs/utils/pagination.js";
import { STATUS_SUCCESS } from "#libs/common.constants.js";

import { <%= moduleNames.lowerCamelCase %> } from "./<%= moduleNames.kebabCase %>.model.js";

/** @type {FindAll} */
const findAll = async ({ db }, { page, limit }) => {
  const { offset } = calculatePaginationOffset({ page, limit });

  const [[{ itemCount }], entities] = await Promise.all([
    db.select({ itemCount: count() }).from(<%= moduleNames.lowerCamelCase %>),
    db.select().from(<%= moduleNames.lowerCamelCase %>).offset(offset).limit(limit),
  ]);

  return createPaginatedResponse({
    itemCount,
    entities,
    offset,
    limit,
  });
};

/** @type {FindOneById} */
const findOneById = async ({ db }, id) => {
  const [<%= pluralModuleNames.pascalCase %>] = await db.select().from(<%= moduleNames.lowerCamelCase %>).where(eq(<%= moduleNames.lowerCamelCase %>.id, id));

  if (!<%= pluralModuleNames.pascalCase %>) {
    return ResourceNotFoundException.of(`<%= pluralModuleNames.pascalCase %> with id: ${id} not found`);
  }

  return <%= pluralModuleNames.pascalCase %>;
};

/** @type {CreateOne} */
const createOne = async ({ db }, dto) => {
  const [new<%= pluralModuleNames.pascalCase %>] = await db.insert(<%= moduleNames.lowerCamelCase %>).values(dto).returning();
  return new<%= pluralModuleNames.pascalCase %>;
};

/** @type {UpdateOneById} */
const updateOneById = async ({ db }, id, dto) => {
  const [updated<%= pluralModuleNames.pascalCase %>] = await db.update(<%= moduleNames.lowerCamelCase %>).set(dto).where(eq(<%= moduleNames.lowerCamelCase %>.id, id)).returning();

  if (!updated<%= pluralModuleNames.pascalCase %>) {
    return ResourceNotFoundException.of(`<%= pluralModuleNames.pascalCase %> with ${id} not found`);
  }

  return updated<%= pluralModuleNames.pascalCase %>;
};

/**@type {DeleteOneById} */
const deleteOneById = async ({ db }, id) => {
  const [deleted<%= pluralModuleNames.pascalCase %>] = await db.delete(<%= moduleNames.lowerCamelCase %>).where(eq(<%= moduleNames.lowerCamelCase %>.id, id)).returning();

  if (!deleted<%= pluralModuleNames.pascalCase %>) {
    return ResourceNotFoundException.of(`<%= pluralModuleNames.pascalCase %> with ${id} not found`);
  }

  return STATUS_SUCCESS;
};

/** @param {Dependencies} deps */
export default function <%= moduleNames.lowerCamelCase %>Service(deps) {
  return {
    findAll: partial(findAll, [deps]),
    findOneById: partial(findOneById, [deps]),
    createOne: partial(createOne, [deps]),
    updateOneById: partial(updateOneById, [deps]),
    deleteOneById: partial(deleteOneById, [deps]),
  };
}

/**
 * @typedef {import("./<%= moduleNames.kebabCase %>.contracts.js").Order} Order
 * @typedef {import("./<%= moduleNames.kebabCase %>.contracts.js").CreateOrder} CreateOrder
 * @typedef {import("./<%= moduleNames.kebabCase %>.contracts.js").UpdateOrder} UpdateOrder
 * @typedef {import("./<%= moduleNames.kebabCase %>.contracts.js").FindAllOrderInput} FindAllOrderInput
 * @typedef {import("./<%= moduleNames.kebabCase %>.contracts.js").FindAllOrderOutput} FindAllOrderOutput
 *
 * @typedef {function(Dependencies, FindAllOrderInput ):Promise<FindAllOrderOutput>} FindAll
 * @typedef {function(Dependencies, string):Promise<Order>} FindOneById
 * @typedef {function(Dependencies, CreateOrder ):Promise<Order>} CreateOne
 * @typedef {function(Dependencies, string, UpdateOrder ):Promise<Order>} UpdateOneById
 * @typedef {function(Dependencies, string ):Promise<STATUS_SUCCESS>} DeleteOneById
 */
